snippet model "django model" b 
class ${1:MyModel}(models.Model):
	"""
	${2:Docstring for $1}
	"""
	${4:fields}

	def __unicode__(self):
		return "${5:\{0\}}".format(${6})
endsnippet

snippet form "django form" b
class ${1:MyForm}(forms.Form):
	"""
	${2:Docstring for $1}
	"""
	${3:fields}
endsnippet

snippet mform "django model form" b
class ${1:ModelForm}(forms.ModelForm):
	"""
	${2:@todo - Docstring for $1}
	class Meta:
		model = $2
endsnippet

snippet mtm "django ManyToManyField"
models.ManyToManyField($1)
endsnippet

snippet mtm "django ManyToManyField" !b
${1:field} = models.ManyToManyField($2)
endsnippet

snippet char "django CharField"
models.CharField(max_length=${1:200}$2)
endsnippet

snippet char "django CharField" !b
${1:field} = models.CharField(max_length=${2:200}$3)
endsnippet

snippet fkey "django ForeignKey"
models.ForeignKey('$1')
endsnippet

snippet fkey "django ForeignKey" !b
${1:field} = models.ForeignKey('$2')
endsnippet

snippet int "django IntegerField"
models.IntegerField('$1')
endsnippet

snippet int "django InterField" !b
${1:field} = models.IntegerField($2)
endsnippet

snippet date "django DateField"
models.DateField($1)
endsnippet

snippet date "django DateField" !b
${1:field} = models.DateField($2)
endsnippet

snippet date "django DateTimeField"
models.DateTimeField($1)
endsnippet

snippet date "django DateTimeField" !b
${1:field} = models.DateTimeField($2)
endsnippet

snippet email "django EmailField"
models.EmailField($1)
endsnippet

snippet email "django EmailField" !b
${1:field} = models.EmailField($2)
endsnippet

snippet view "django view" b
class ${1:MyView}(generic.View):
	"""
	${2:Docstring for $1}
	"""
	template_name = '${3}'

	def get(self, request$4, **kwargs):
		pass

	def post(self, request$4, **kwargs):
		pass
endsnippet

snippet view "django view w/ login_required" b
class ${1:MyView}(generic.View):
	"""
	${2:Docstring for $1}
	"""
	template_name = '${3}'

	def get(self, request$4, **kwargs):
		pass

	def post(self, request$4, **kwargs):
		pass

	@method_decorator(login_required)
	def dispatch(self, *args, **kwargs):
		return super($1, self).dispatch(*args, **kwargs)
endsnippet

snippet while "while loop" b
while ${1:condition}:
	${2:code...}

snippet prop "property" b
def ${1:foo}():
	doc = "${2:$1 property.}"

	def fget(self):
		${3:return self._$1}

	def fset(self, value):
		self._$1 = value
endsnippet

snippet url "django url"
def (r'${1:url}', ${2:view}, name="${3:name}")
endsnippet
